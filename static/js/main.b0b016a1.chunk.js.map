{"version":3,"sources":["components/timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","time","this","props","reste","h","m","s","addZero","v","Math","floor","react_default","a","createElement","className","id","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","timeree","e","target","value","setState","input","alert","type","onChange","components_timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRA+DeA,0NA3DXC,MAAQ,2EAGJ,IAAIC,EAAKC,KAAKC,MAAMF,KAChBG,EAAM,EACNC,EAAE,EACFC,EAAE,EACFC,EAAE,EACFC,EAAU,SAASC,GAAK,OAAOA,EAAE,GAAK,IAAMA,EAAIA,GAyBpD,OArBQR,EAAO,QAEPI,EAAIK,KAAKC,MAAMV,EAAK,MACnBG,EAAQH,EAAK,KAEdK,EAAII,KAAKC,MAAMP,EAAM,IAErBG,EAAIH,EAAM,IAgBlBQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZH,EAAAC,EAAAC,cAAA,QAAME,GAAG,QAAQR,EAAQH,IACzBO,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAME,GAAG,UAAUR,EAAQF,IAC3BM,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAME,GAAG,UAAUR,EAAQD,KAE7BK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAhB,QACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAhB,UACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAhB,WAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yCApDPE,cCgCLC,cA9Bb,SAAAA,EAAYf,GAAM,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,KAAMC,KAKRsB,QAAQ,SAACC,GACHA,EAAEC,OAAOC,MAAQ,MACrBT,EAAKU,SAAS,CACbC,MAAMJ,EAAEC,OAAOC,QAERF,EAAEC,OAAOC,OAAS,OACtBF,EAAEC,OAAOC,MAAMT,EAAKnB,MAAM8B,MAC1BC,MAAM,2CAELA,MAAM,qCACTL,EAAEC,OAAOC,MAAMT,EAAKnB,MAAM8B,QAd5BX,EAAKnB,MAAO,CACV8B,MAAM,IAHQX,wEAoBhB,OACEP,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,OAAOJ,MAAO1B,KAAKF,MAAM4B,MAAOK,SAAU/B,KAAKuB,UAC3Db,EAAAC,EAAAC,cAACoB,EAAD,CAAOjC,KAAMC,KAAKF,MAAM8B,MAAOf,UAAU,gBAzB/BE,aCQEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b0b016a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './timer.css'\r\n\r\nclass Timer extends Component {\r\n    state = {  }\r\n    render() { \r\n     \r\n        let time=this.props.time;\r\n        let reste=0;\r\n        let h=0;\r\n        let m=0;\r\n        let s=0;\r\n        let addZero = function(v) { return v<10 ? '0' + v : v; };\r\n        // function conversion_seconde_heure(time)\r\n        // {\r\n            //86400 = 3600*24 \r\n            if (time < 86400 )// && time>=3600      si le nombre de secondes ne contient pas de jours mais contient des heures\r\n            {\r\n                h = Math.floor(time/3600);\r\n                 reste = time%3600;\r\n         \r\n                m = Math.floor(reste/60);\r\n         \r\n                s = reste%60;\r\n         \r\n        }\r\n        \r\n        // function start() {\r\n           \r\n        //     time = prompt(\"Please enter an integer:\");\r\n        // }\r\n           \r\n\r\n\r\n\r\n\r\n\r\n        return ( \r\n           \r\n        <div className=\"App\">\r\n            <div className=\"center\">\r\n             <div className=\"timer-num\">\r\n                <span id=\"hour\">{addZero(h)}</span>\r\n                <span className=\"points\">:</span>\r\n                <span id=\"minute\">{addZero(m)}</span>\r\n                <span className=\"points\">:</span>\r\n                <span id=\"second\">{addZero(s)}</span>\r\n              </div>\r\n              <div className=\"timer-HMS\">\r\n                <span className='MHS'>Hour</span>\r\n                <span className='MHS'>Minute</span>\r\n                <span className='MHS'>Second</span>\r\n              </div>\r\n              <div className=\"timer-btns\">\r\n              <i className=\"far fa-play-circle satrt-btn\" ></i>\r\n              <i className=\"fas fa-power-off reset-btn\" ></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Timer;","import React, { Component } from 'react'\nimport './App.css'\nimport Timer from'./components/timer.js'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state=({\n      input:''\n    })\n  }\n  timeree=(e)=>{\n    if (e.target.value < 86400 ){\n    this.setState({\n     input:e.target.value\n    })}\n    else if(e.target.value >= 86400){\n        e.target.value=this.state.input\n        alert(\"opss !! we are now talking about days\");\n    }\n    else{alert(\"opss !! Please enter an integer: \");\n      e.target.value=this.state.input}\n  }\n  render() {\n\n    return ( \n      <div>\n        \n        <input type='text' value={this.state.value} onChange={this.timeree}/>\n        <Timer time={this.state.input} className=\"App\"/>\n     </div>\n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}